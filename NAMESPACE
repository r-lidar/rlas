# Generated by roxygen2: do not edit by hand

export(check_las_compliance)
export(check_las_validity)
export(fwf_interpreter)
export(header_add_extrabytes)
export(header_add_extrabytes_manual)
export(header_create)
export(header_get_epsg)
export(header_get_wktcs)
export(header_set_epsg)
export(header_set_wktcs)
export(header_update)
export(is_NIR_in_valid_format)
export(is_RGB_in_valid_format)
export(is_ScanAngle_in_valid_format)
export(is_ScannerChannel_in_valid_format)
export(is_XY_larger_than_bbox)
export(is_XY_smaller_than_bbox)
export(is_Z_in_bbox)
export(is_compliant_NumberOfReturns)
export(is_compliant_RGB)
export(is_compliant_ReturnNumber)
export(is_compliant_ReturnNumber_vs_NumberOfReturns)
export(is_compliant_ScanAngle)
export(is_compliant_ScanAngleRank)
export(is_compressed)
export(is_defined_coordinates)
export(is_defined_date)
export(is_defined_extrabytes)
export(is_defined_filesourceid)
export(is_defined_globalencoding)
export(is_defined_offsets)
export(is_defined_pointformat)
export(is_defined_scalefactors)
export(is_defined_version)
export(is_empty_point_cloud)
export(is_extrabytes_in_accordance_with_data)
export(is_gpstime_in_valid_format)
export(is_number_of_points_by_return_in_accordance_with_header)
export(is_number_of_points_in_accordance_with_header)
export(is_valid_Classification)
export(is_valid_EdgeOfFlightline)
export(is_valid_Intensity)
export(is_valid_KeypointFlag)
export(is_valid_NIR)
export(is_valid_NumberOfReturns)
export(is_valid_OverlapFlag)
export(is_valid_PointSourceID)
export(is_valid_RGB)
export(is_valid_ReturnNumber)
export(is_valid_ScanAngle)
export(is_valid_ScanAngleRank)
export(is_valid_ScanDirectionFlag)
export(is_valid_ScannerChannel)
export(is_valid_SyntheticFlag)
export(is_valid_UserData)
export(is_valid_WithheldFlag)
export(is_valid_XYZ)
export(is_valid_date)
export(is_valid_extrabytes)
export(is_valid_filesourceid)
export(is_valid_globalencoding)
export(is_valid_gpstime)
export(is_valid_offsets)
export(is_valid_pointformat)
export(is_valid_scalefactors)
export(is_valid_version)
export(read.las)
export(read.lasheader)
export(stream.las)
export(true_size)
export(write.las)
export(writelax)
importFrom(Rcpp,sourceCpp)
useDynLib(rlas, .registration = TRUE)
